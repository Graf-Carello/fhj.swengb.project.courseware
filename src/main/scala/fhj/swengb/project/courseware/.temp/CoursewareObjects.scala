/*package fhj.swengb.project.courseware

import java.io.InputStream

import fhj.swengb.Student

import fhj.swengb.project.courseware.CoursewareEntities.Exam

/**
  * Created by Elza Karimova on 20.01.2016.
  */
// hier sollen Objekte Courses, Students etc erstellt werden, wo drinnen einzelne Course gespeichert sind. (Wie bei Students)
/*Folgende Objekte:



Students
Lecturers
Courses
Lectures
Homeworks
Projects
Exams
Points

 */

object CoursewareObjects {
/*
  val courseOne: Course = new Course(1, "ITISD", "3", "23.7.2016", "18.9.2016", 256.55)
  val courseTwo: Course = new Course(2, "SWENGB", "3", "23.7.2016", "18.9.2016", 56.55)
  val courseThree: Course = new Course(3, "Basics", "1", "23.7.2016", "18.9.2016", 156.55)
  val courseFour: Course = new Course(4, "Advanced", "4", "23.7.2016", "18.9.2016", 156.55)
  val courseFive: Course = new Course(5, "SUNW", "3", "23.7.2016", "18.9.2016", 100.55)

  val courses: Set[Course] = Set(courseOne, courseTwo, courseThree, courseFour, courseFive)
*/

  val attempt1: Exam = new Exam(1, "ITISD",  "12.00", "13.00","9.12.2015", 40.00)
  val attempt2: Exam = new Exam(2, "ITISD",  "12.00", "13.00","18.1.2016", 40.00)
  val attempt3: Exam = new Exam(3, "ITISD",  "12.00", "13.00","28.1.2016", 40.00)
  val attempt4: Exam = new Exam(4, "ITISD",  "12.00", "13.00","6.3.2016", 40.00)

  val exams: Set[Exam] = Set(attempt1,attempt2,attempt3,attempt4)



  //##############################################################################################
  //####################################################################################################
  /*Courses

  object Courses {


    val swengb: Course = Course(1, "SWENGB", "3", "23.7.2016", "18.9.2016", 204)

    var courses:Set[Course]= Set(swengb)

    def mkCourse(course:Course): Set[Course] = {
       //insert new course into object "courses"
    courses = courses :+ course
    }

    def compareByDescrption(a: Course, b: Course): Boolean = {
      a.description.compareTo(b.description) < 0
    }


    def toScala(s: Course): String = {
      s""" val ${s.id}: Student = Student("${s.description}", "${s.semester}", "${s.start}","${s.end}", ${s.points})
          |
     """.stripMargin
    }

    def generateSource(): String = {
      "  // generated by generateSource(...) START\n" +
        sortedCourses.map(toScala).mkString + "\n" +
        "  // generated by generateSource(...) END"
    }



    lazy val sortedCourses = courses.toSeq.sortWith(compareByDescription)


    def main(args: Array[String]): Unit = {
      sortedCourses.foreach(s => println(_.id)) //s"//import fhj.swengb.assignments.tree.${s.userId}._"))
    }

  }

*/
  //##############################################################################################
  //####################################################################################################
  // Lectures

  //##############################################################################################
  //####################################################################################################
  // Homeworks

  //##############################################################################################
  //####################################################################################################
  // Projects

  //##############################################################################################
  //####################################################################################################
  // Exams

  //##############################################################################################
  //####################################################################################################
  // Points



  //##############################################################################################
  //####################################################################################################
  // Lecturers

  // Bessere Lösung (brauch man für jede Objektgruppe erstellen)

  //##############################################################################################
  //####################################################################################################
 /*/ Student Example
  object Students {

    // generated by generateSource(...)
    val abajric: Student = Student("Amar", "Bajric", "amarbajric", 2)

    val jblazevic: Student = Student("Josip", "Blazevic", "jbtastic", 1)

    val cdirnbauer: Student = Student("Christoph", "Dirnbauer", "dirnbaue14", 3)

    val dfolk: Student = Student("Daniel", "Folk", "Folkdani13", 3)

    val mfuchs: Student = Student("Michael", "Fuchs", "deKilla", 1)

    val cfuerbahs: Student = Student("Christoph", "Fürbahs", "furchr", 1)

    val fgraf: Student = Student("Felix", "Graf", "Graf-Carello", 1)

    val thasenbichler: Student = Student("Timo", "Hasenbichler", "timoooo", 1)

    val cherzog: Student = Student("Carina", "Herzog", "carinaher", 1)

    val ghoxha: Student = Student("Granit", "Hoxha", "hoxhagra14", 2)

    val shysi: Student = Student("Steven", "Hysi", "Lionade", 2)

    val dkandlhofer: Student = Student("Daniel", "Kandlhofer", "danielkandlhofer", 2)

    val ekarimova: Student = Student("Elza", "Karimova", "elsakarimova", 1)

    val mknaller: Student = Student("Markus", "Knaller", "knalla66", 2)

    val pkoerner: Student = Student("Paul", "Körner", "McKorleone", 1)

    val clagger: Student = Student("Christian", "Lagger", "clagger", 2)

    val sleitner: Student = Student("Stefan", "Leitner", "loete", 2)

    val alichtenegger: Student = Student("Alexander", "Lichtenegger", "AlexanderLichtenegger", 1)

    val gmeizenitsch: Student = Student("Georg", "Meizenitsch", "meizenit14", 2)

    val pnguyen: Student = Student("Phuong", "Nguyen", "nguyenhuyphuong2603", 3)

    val tortmann: Student = Student("Thomas", "Ortmann", "tortmann", 3)

    val aschneider: Student = Student("Andreas", "Schneider", "Zerberuss", 1)

    val aseebacher: Student = Student("Andreas", "Seebacher", "andseeb", 3)

    val vskerbinz: Student = Student("Verena", "Skerbinz", "verisker", 2)

    val nspalek: Student = Student("Nina", "Spalek", "NSpalek", 3)

    val wsteinkellner: Student = Student("Wolfgang", "Steinkellner", "steinkel14", 2)

    val hvidal: Student = Student("Hector", "Vidal", "MikVidal", 3)

    val mwageneder: Student = Student("Maximilian", "Wageneder", "mwageneder", 3)

    val myildiz: Student = Student("Marcel", "Yildiz", "yildizma14", 3)

    val lzefferer: Student = Student("Lukas", "Zefferer", "zefferel14", 3)

    val mzsifkovits: Student = Student("Markus", "Zsifkovits", "mzsif", 3)


    // generated by generateSource END

    def mkStudents(): Set[Student] = {
      val src: InputStream = getClass.getResourceAsStream("/fhj/swengb/students.csv")
      assert(src != null, "Could not find student definition file")
      (for (l <- io.Source.fromInputStream(src).getLines()) yield {
        val Array(group, secondName, firstName, githubUsername) = l.split(",")
        Student(firstName, secondName, githubUsername, group.toInt)
      }).toSet
    }

    def compareBySecondname(a: Student, b: Student): Boolean = {
      a.secondName.compareTo(b.secondName) < 0
    }


    def toScala(s: Student): String = {
      s""" val ${s.userId}: Student = Student("${s.firstName}", "${s.secondName}", "${s.githubUsername}", ${s.groupId})
          |
     """.stripMargin
    }

    def generateSource(): String = {
      "  // generated by generateSource(...) START\n" +
        sortedStudents.map(toScala).mkString + "\n" +
        "  // generated by generateSource(...) END"
    }

    val students: Set[Student] = Set(abajric,
      jblazevic, cdirnbauer,
      dfolk, mfuchs, cfuerbahs, fgraf,
      thasenbichler, cherzog, ghoxha, shysi,
      dkandlhofer, ekarimova, mknaller, pkoerner,
      clagger, sleitner, alichtenegger, gmeizenitsch,
      pnguyen, tortmann, aschneider, aseebacher,
      vskerbinz, nspalek, wsteinkellner, hvidal,
      mwageneder, myildiz, lzefferer, mzsifkovits)


    lazy val sortedStudents = students.toSeq.sortWith(compareBySecondname)
    lazy val studentGroup1 = students.filter(_.groupId == 1)
    lazy val studentGroup2 = students.filter(_.groupId == 2)
    lazy val studentGroup3 = students.filter(_.groupId == 3)

    def main(args: Array[String]): Unit = {
      sortedStudents.foreach(s => println(s"//import fhj.swengb.assignments.tree.${s.userId}._"))
    }

  }

*/
}
*/